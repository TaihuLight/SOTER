# DO NOT MODIFY. THIS FILE WAS AUTO-GENERATED.

# This is a general manifest template for running Bash and core utility programs,
# including ls, cat, cp, date, and rm.
#
# This manifest was prepared and tested on Ubuntu 16.04.

# The executable to load in Graphene. We replace EXECPATH and ARGV0_OVERRIDE for
# each program that a manifest is generated for.
loader.exec = file:/usr/bin/mnist
loader.argv0_override = mnist

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = 1

# Graphene environment, including the path of the library OS and the debug
# option (inline/none).
loader.preload = file:/home/ubuntu/graphene//Runtime/libsysdb.so
loader.debug_type = none

# Environment variables
loader.env.LD_LIBRARY_PATH = /lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:/home/ubuntu/graphene//Runtime

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by Bash
fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

# Mount /bin
fs.mount.bin.type = chroot
fs.mount.bin.path = /usr/bin
fs.mount.bin.uri = file:/usr/bin

fs.mount.torch.type = chroot
fs.mount.torch.path = /home/ubuntu/libtorch/
fs.mount.torch.uri = file:/home/ubuntu/libtorch/

fs.mount.lib3.type = chroot
fs.mount.lib3.path = /usr/lib/x86_64-linux-gnu/
fs.mount.lib3.uri = file:/usr/lib/x86_64-linux-gnu/

fs.mount.data.type = chroot
fs.mount.data.path = /home/ubuntu/data
fs.mount.data.uri = file:/home/ubuntu/data

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If the program needs more virtual
# memory than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = 1G

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 4

# SGX trusted libraries

# Glibc libraries
sgx.trusted_files.ld = file:/home/ubuntu/graphene//Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:/home/ubuntu/graphene//Runtime/libc.so.6
sgx.trusted_files.libm = file:/home/ubuntu/graphene//Runtime/libm.so.6
sgx.trusted_files.libdl = file:/home/ubuntu/graphene//Runtime/libdl.so.2
sgx.trusted_files.librt = file:/home/ubuntu/graphene//Runtime/librt.so.1
sgx.trusted_files.libutil = file:/home/ubuntu/graphene//Runtime/libutil.so.1
sgx.trusted_files.libpthread = file:/home/ubuntu/graphene//Runtime/libpthread.so.0

# Name Service Switch (NSS) libraries (Glibc dependencies)
sgx.trusted_files.libnsscompat = file:/lib/x86_64-linux-gnu/libnss_compat.so.2
sgx.trusted_files.libnssfiles = file:/lib/x86_64-linux-gnu/libnss_files.so.2
sgx.trusted_files.libnssnis = file:/lib/x86_64-linux-gnu/libnss_nis.so.2

# Additional libs opened by Bash at runtime
sgx.trusted_files.libselinux1 = file:/lib/x86_64-linux-gnu/libselinux.so.1
sgx.trusted_files.libpcre = file:/lib/x86_64-linux-gnu/libpcre.so.3
sgx.trusted_files.libacl = file:/lib/x86_64-linux-gnu/libacl.so.1
sgx.trusted_files.libattr = file:/lib/x86_64-linux-gnu/libattr.so.1
sgx.trusted_files.data1 = file:/home/ubuntu/data/t10k-images-idx3-ubyte
sgx.trusted_files.data2 = file:/home/ubuntu/data/t10k-labels-idx1-ubyte
sgx.trusted_files.data3 = file:/home/ubuntu/data/train-images-idx3-ubyte
sgx.trusted_files.data4 = file:/home/ubuntu/data/train-labels-idx1-ubyte
sgx.allowed_files.data5 = file:/home/ubuntu/data/inter_grad.tensor
sgx.allowed_files.data5 = file:/home/ubuntu/data/inter_grad.tensor

# Other required libraries
sgx.trusted_files.libc10 = file:/home/ubuntu/libtorch/lib/libc10.so
sgx.trusted_files.libgcc_s = file:/lib/x86_64-linux-gnu/libgcc_s.so.1
sgx.trusted_files.libgompa34b3233 = file:/home/ubuntu/libtorch/lib/libgomp-a34b3233.so.1
sgx.trusted_files.libstdc = file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6
sgx.trusted_files.libtorch = file:/home/ubuntu/libtorch/lib/libtorch.so
sgx.trusted_files.libtorch_cpu = file:/home/ubuntu/libtorch/lib/libtorch_cpu.so


# Signatures of child enclaves


sgx.allowed_files.scripts = file:scripts

sgx.zero_heap_on_demand = 1

# Generated by Graphene

sgx.allow_file_creation = 0
sgx.enable_stats = 0
sgx.isvprodid = 0
sgx.isvsvn = 0
sgx.sigfile = file:mnist.sig
sgx.static_address = 0
sgx.trusted_checksum.data1 = 0fa7898d509279e482958e8ce81c8e77db3f2f8254e26661ceb7762c4d494ce7
sgx.trusted_checksum.data2 = ff7bcfd416de33731a308c3f266cc351222c34898ecbeaf847f06e48f7ec33f2
sgx.trusted_checksum.data3 = ba891046e6505d7aadcbbe25680a0738ad16aec93bde7f9b65e87a2fc25776db
sgx.trusted_checksum.data4 = 65a50cbbf4e906d70832878ad85ccda5333a97f0f4c3dd2ef09a8a9eef7101c5
sgx.trusted_checksum.exec = f0e959221b53cca9c7a6ce7b0f67a6fc2a9cf5dfac88e3027ba77311ce0709b7
sgx.trusted_checksum.ld = f039cce0938ca981cd21bd50096e85acfa5cab18a13e5abb3cc4f7831cfa5cc3
sgx.trusted_checksum.libacl = fb0986a5026f20b337c07d17d4746cf8b9f3804848c44972efd4db09ac2f099e
sgx.trusted_checksum.libattr = da4544721850c1466cdc58f9540c28b26e2ec3dc6b0d2b37bf8f2ec74c6aa910
sgx.trusted_checksum.libc = a846cdfd2b4a40f2a844cecf8e7559fbb605c14b2e314971bdc9051f2d2474db
sgx.trusted_checksum.libc10 = 70319db5b3c37d8e137484f348000574c78dc398db50062a12b622a114400191
sgx.trusted_checksum.libdl = a1d16ebae2c8a3d5d610f97a66d05755b30e087b5119c2c76ec7992ab4d38980
sgx.trusted_checksum.libgcc_s = 2f0e486606bd477c6a6ad3588176a16099ed05a8bf47cf3bd27b490bea3d59e9
sgx.trusted_checksum.libgompa34b3233 = 7923ba20d384f3019038ceeb8f0ad070391412b4cc5a206589abcf5b6fc68352
sgx.trusted_checksum.libm = 236e94c513167b2394b34a20ca3398b895740b04f8caf3c319746a3c310dcf78
sgx.trusted_checksum.libnsscompat = 1cdade07cb661441bfe9a19122c1914dce77537d02b9fc52dd8e015a796eb3d3
sgx.trusted_checksum.libnssfiles = 7d1fe3b29c041b1da1829e409a48cea22451890049743f7bae7831b1643f0c07
sgx.trusted_checksum.libnssnis = 4953ec8006af8408c29ac23ed5d884b8c0eaa51f3de78044a2149ae67a15762b
sgx.trusted_checksum.libpcre = d14920b8c1cb4e4cbe5f7c9ad23f6d9cf7b4ab1ddce1a29c9fc766b51c29ebea
sgx.trusted_checksum.libpthread = dc72dc5c689fa0e152a9719c66d4b28df2424a91e12bfab3fff77eb21b240008
sgx.trusted_checksum.librt = 27313fb7cf030f1bc155867bf0f8ab097d0e1a0921fc2bdc3d37afc4a02bc27d
sgx.trusted_checksum.libselinux1 = 1307a5b52d35d96cee2b4fa1bb037b0495ee5c87f1f96727026a718ac4da8b0d
sgx.trusted_checksum.libstdc = a7ce5e3ab89895f02ad5d55f6b2090c3882ba5f4e12fbd9b96f0ed1712e2a1f6
sgx.trusted_checksum.libtorch = b732a939e64637e72cde155390a4f0bac9265f18c74cc1217cc32713ba2dd2c3
sgx.trusted_checksum.libtorch_cpu = fea157e2f875f1c5ec4863a01378a1c7f9584e3dd3420f1865e88874b17e47f2
sgx.trusted_checksum.libutil = f86255c9ac6390333f535ebd2b8d677860287054021be566e9ecab663cdeb3f8
sgx.trusted_checksum.preload0 = c1f013ee60dfe63d47738a46df4de58daa354ad9d1ffb384acb84f45eb0da275
